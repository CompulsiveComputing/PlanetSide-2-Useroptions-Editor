/*
 * Created by SharpDevelop.
 * User: Devahlin
 * Date: 02/02/2015
 * Time: 5:51 PM
 * 
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 */
using System;
using System.IO;
using System.Windows;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.Globalization;

namespace PS2_INI_Editor
{
	/// <summary>
	/// Description of backupManager.
	/// </summary>
	public class backupManager : customObservable1
	{
		MainWindow main;
		
		public override bool changesMade
		{
			get
			{
				return false;
			}
			set
			{
			}
		}
		
		private List<backupGroup> _allBackups = new List<backupGroup>();
		
		public List<backupGroup> allBackups
		{
			get
			{
				return _allBackups;
			}
			set
			{
				if(_allBackups != value)
				{
					_allBackups = value;
					NotifyPropertyChanged("allBackups");
				}
			}
		}
		
		public void populateBackups()
		{
			if(main.head.currentConfiguration.isInitialized)
			{
				string backupFolderPath = main.head.currentConfiguration._backupFolderLocation.text;
				allBackups = loadAllFromSubFolders(backupFolderPath);
			}
		}
		
		public backupManager()
		{
			main = App.Current.MainWindow as MainWindow;
		}
		
		List<backupGroup> loadAllFromSubFolders(string folderPath)
		{
			List<backupGroup> returnList = new List<backupGroup>();
			DirectoryInfo initialFolder = new DirectoryInfo(folderPath);
			DirectoryInfo[] subFolders;
			List<backupGroup> tempBackupGroup = new List<backupGroup>();
			//DirectoryInfo currentFolder;
			//int sanityCheck = 0;
			//int maxSanityCheck = 2000;
			
			if(folderPath.Length <= 255)
			{
				foreach (DirectoryInfo subInitialFolder in initialFolder.GetDirectories())
				{
					subFolders = subInitialFolder.GetDirectories();
					if(subFolders.Length == 0)
					{
						tempBackupGroup.Add(loadAllFromFolder(subInitialFolder.FullName));
						if(tempBackupGroup[0] != null)
							returnList.AddRange(tempBackupGroup);
					}
					else
					{
						if(subFolders.Length >= 1)
						{
							tempBackupGroup = loadAllFromSubFolders(subInitialFolder.FullName);
							if(tempBackupGroup != null)
								returnList.AddRange(tempBackupGroup);
						}
					}
					// do nothing if there are no child folders
				}
				return returnList;
			}
			return null;
			
		}
		
		backupGroup loadAllFromFolder(string folderPath) // prob gonna error on any files not generated by this utility
		{
			DirectoryInfo backupFolder = new DirectoryInfo(folderPath);
			backupGroup returnObj = new backupGroup();
			returnObj.folderPath = folderPath;
			returnObj.shortName = folderPath.Replace(main.head.currentConfiguration._backupFolderLocation.text, string.Empty);
			INIinterfacer tempINI;
			INIBackup tempINIBackup;
			string tempString;
			
			foreach (FileInfo currentFile in backupFolder.GetFiles())
			{
				tempINIBackup = new INIBackup();
				tempINI = new INIinterfacer();
				
				tempINI.location = currentFile.FullName;
				
				tempString = currentFile.Name;
				
				tempINI.loadINI();
				
				tempINIBackup.backup = tempINI;
				
				string [] removeStrings = {"UserOptions~", ".ini"};
				
				foreach(string removeString in removeStrings)
				{
					tempString = tempString.Replace(removeString, string.Empty);
				}
				
				tempINIBackup.backupTime = DateTime.ParseExact(tempString, main.head.currentConfiguration._timeDateFormat, CultureInfo.InvariantCulture);
				
				returnObj.backupList.Add(tempINIBackup);
			}
			return returnObj;
		}
	}
	
	public class backupGroup : customObservable1
	{
		private bool _changesMade;
		public override bool changesMade
		{
			get{return _changesMade;}
			set{_changesMade = value;}
		}
		
		private string _folderPath;
		public string folderPath
		{
			get
			{
				return _folderPath;
			}
			set
			{
				if(value != _folderPath)
				{
					_folderPath = value;
					NotifyPropertyChanged("folderPath");
				}
			}
		}
		
		private string _shortName;
		
		public string shortName
		{
			get
			{
				return _shortName;
			}
			set
			{
				_shortName = value;
			}
		}
		
		private List<backupBase> _backupList = new List<backupBase>();
		public List<backupBase> backupList
		{
			get
			{
				return _backupList;
			}
			set
			{
				if(_backupList != value)
				{
					_backupList = value;
					NotifyPropertyChanged("backupList");
				}
			}
		}
	}
	
	public class INIBackup : genericBackup<INIinterfacer>
	{
		public INIBackup()
		{
			backup = new INIinterfacer();
		}
	}
	
	public abstract class genericBackup<T> : backupBase
	{
		private T _backup;
		public T backup
		{
			get
			{
				return _backup;
			}
			set
			{
				if(!value.Equals(_backup))
				{
					_backup = value;
					
					NotifyPropertyChanged("backup");
				}
			}
		}
		
		public DateTime backupTime = new DateTime();
	}
	
	public abstract class backupBase : customObservable1
	{
		private bool _changesMade;
		public override bool changesMade
		{
			get{return _changesMade;}
			set{_changesMade = value;}
		}
	}
	
	
}
